generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
}

model activity {
  id        Int       @id @default(autoincrement())
  dateTime  DateTime  @default(now())
  userId    Int
  user      user      @relation(fields: [userId], references: [id])
  gpId      Int
  gp        gp        @relation(fields: [gpId], references: [id])
  action    String
}

model city {
  id        Int     @id @default(autoincrement())
  name      String
  nationId  Int
  nation    nation  @relation(fields: [nationId], references: [id])
  gps       gp[]
  @@map("cities")
}

model gp {
  id            Int       @id @default(autoincrement())
  gp            Int
  cityId        Int
  city          city      @relation(fields: [cityId], references: [id])
  dateTime      DateTime
  wildCard      Int?
  finished      Boolean   @default(false)
  usersResults  userResult[]
  usersPicks    userPick[]
  ridersResults riderResult[]
  activity      activity[]
	@@map("gps")
}

model nation {
  id      Int     @id @default(autoincrement())
  name    String
  code    String
  cities  city[]
  riders  rider[]
	@@map("nations")
}

model rider {
  id            Int     @id @default(autoincrement())
  name          String
  number        Int
  nationId      Int
  nation        nation  @relation(fields: [nationId], references: [id])
  active        Int     @default(0)
  sub           Int     @default(0)
  riderResults  riderResult[]
  picks         pick[]
	@@map("riders")
}

model riderResult {
  id      Int   @id @default(autoincrement())
  riderId Int
  rider   rider @relation(fields: [riderId], references: [id])
  gpId    Int
  gp      gp    @relation(fields: [gpId], references: [id])
  points  Int   @default(0)
  m1      Int?
  m2      Int?
  m3      Int?
  races   Int   @default(0)
	@@map("riderResults")
}

model user {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  admin         Boolean   @default(false)
  reminder      Boolean   @default(true)
  registered    DateTime  @default(now())
  uid           String    @unique
  userResults   userResult[]
  userStandings userStanding[]
  userStars     userStar[]
  userPicks     userPick[]
  activity      activity[]
	@@map("users")
}

model userPick {
  id      Int       @id @default(autoincrement())
  userId  Int
  user    user      @relation(fields: [userId], references: [id])
  gpId    Int
  gp      gp        @relation(fields: [gpId], references: [id])
  created DateTime  @default(now())
  updated DateTime  @updatedAt
  picks   pick[]
	@@map("userPicks")
}

model pick {
  id          Int       @id @default(autoincrement())
  userPickId  Int
  user        userPick  @relation(fields: [userPickId], references: [id])
  riderId     Int
  rider       rider     @relation(fields: [riderId], references: [id])
	@@map("picks")
}

model userResult {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    user  @relation(fields: [userId], references: [id])
  gpId    Int
  gp      gp    @relation(fields: [gpId], references: [id])
  points  Int   @default(0)
  m1      Int?
  m2      Int?
  m3      Int?
  races   Int   @default(0)
  pos     Int?
	@@map("userResults")
}

model userStanding {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    user  @relation(fields: [userId], references: [id])
  year    Int
  points  Int   @default(0)
  m1      Int?
  m2      Int?
  m3      Int?
  races   Int   @default(0)
  pos     Int?
  prevPos Int?
	@@map("userStandings")
}

model userStar {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    user  @relation(fields: [userId], references: [id])
  year    Int
  type    Int
	@@map("userStars")
}
